============================= test session starts =============================
platform win32 -- Python 3.13.9, pytest-8.4.2, pluggy-1.6.0
rootdir: C:\Users\Jesse\Documents\Version Control\validators-orig
configfile: pyproject.toml
testpaths: tests
plugins: hypothesis-6.142.4, cov-7.0.0
collected 895 items

tests\crypto_addresses\test_bsc_address.py .........................     [  2%]
tests\crypto_addresses\test_btc_address.py ........                      [  3%]
tests\crypto_addresses\test_eth_address.py FFFFFFFFFFFFFFFFF             [  5%]
tests\crypto_addresses\test_trx_address.py ...........................   [  8%]
tests\i18n\test_es.py .................................................. [ 14%]
.........                                                                [ 15%]
tests\i18n\test_fi.py .............................                      [ 18%]
tests\i18n\test_fr.py ..................................                 [ 22%]
tests\i18n\test_ind.py ..........                                        [ 23%]
tests\i18n\test_ru.py ....................                               [ 25%]
tests\test__extremes.py ............                                     [ 26%]
tests\test_between.py ..............                                     [ 28%]
tests\test_card.py ..................................................... [ 34%]
........................................................................ [ 42%]
.                                                                        [ 42%]
tests\test_country.py ..........................                         [ 45%]
tests\test_cron.py ..........................                            [ 48%]
tests\test_domain.py ................................................... [ 54%]
....                                                                     [ 54%]
tests\test_email.py .............................                        [ 57%]
tests\test_encoding.py ........................................          [ 62%]
tests\test_finance.py .....................                              [ 64%]
tests\test_hashes.py .............................................       [ 69%]
tests\test_hostname.py ................................                  [ 73%]
tests\test_iban.py ....                                                  [ 73%]
tests\test_ip_address.py ............................................... [ 78%]
..................                                                       [ 80%]
tests\test_length.py ........                                            [ 81%]
tests\test_mac_address.py ........                                       [ 82%]
tests\test_slug.py ........                                              [ 83%]
tests\test_url.py ...................................................... [ 89%]
........................................................................ [ 97%]
.........                                                                [ 98%]
tests\test_uuid.py ........                                              [ 99%]
tests\test_validation_failure.py ....                                    [100%]

================================== FAILURES ===================================
_ test_returns_true_on_valid_eth_address[0x8ba1f109551bd432803012645ac136ddd64dba72] _

value = '0x8ba1f109551bd432803012645ac136ddd64dba72'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x8ba1f109551bd432803012645ac136ddd64dba72'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598] _

value = '0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE] _

value = '0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2] _

value = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0x742d35Cc6634C0532925a3b844Bc454e4438f44e] _

value = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984] _

value = '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0x1234567890123456789012345678901234567890] _

value = '0x1234567890123456789012345678901234567890'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x1234567890123456789012345678901234567890'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_true_on_valid_eth_address[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51] _

value = '0x57Ab1ec28D129707052df4dF418D58a2D46d5f51'

    @pytest.mark.parametrize(
        "value",
        [
            "0x8ba1f109551bd432803012645ac136ddd64dba72",
            "0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598",
            "0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE",
            "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
            "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
            "0x1234567890123456789012345678901234567890",
            "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
        ],
    )
    def test_returns_true_on_valid_eth_address(value: str):
        """Test returns true on valid eth address."""
>       assert eth_address(value)
               ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x57Ab1ec28D129707052df4dF418D58a2D46d5f51'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x742d35Cc6634C0532925a3b844Bc454e4438f44g] _

value = '0x742d35Cc6634C0532925a3b844Bc454e4438f44g'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x742d35Cc6634C0532925a3b844Bc454e4438f44g'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x742d35Cc6634C0532925a3b844Bc454e4438f44] _

value = '0x742d35Cc6634C0532925a3b844Bc454e4438f44'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x742d35Cc6634C0532925a3b844Bc454e4438f44'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0xAbcdefg1234567890Abcdefg1234567890Abcdefg] _

value = '0xAbcdefg1234567890Abcdefg1234567890Abcdefg'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0xAbcdefg1234567890Abcdefg1234567890Abcdefg'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72] _

value = '0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1] _

value = '0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g] _

value = '0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c] _

value = '0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
_ test_returns_failed_validation_on_invalid_eth_address[0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c] _

value = '0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = '0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
____ test_returns_failed_validation_on_invalid_eth_address[validators.eth] ____

value = 'validators.eth'

    @pytest.mark.parametrize(
        "value",
        [
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44g",
            "0x742d35Cc6634C0532925a3b844Bc454e4438f44",
            "0xAbcdefg1234567890Abcdefg1234567890Abcdefg",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72",
            "0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g",
            "0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c",
            "0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c",
            "validators.eth",
        ],
    )
    def test_returns_failed_validation_on_invalid_eth_address(value: str):
        """Test returns failed validation on invalid eth address."""
>       assert isinstance(eth_address(value), ValidationError)
                          ^^^^^^^^^^^^^^^^^^

tests\crypto_addresses\test_eth_address.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src\validators\utils.py:91: in wrapper
    if func(*args, **kwargs)
       ^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

value = 'validators.eth'

    @validator
    def eth_address(value: str, /):
        """Return whether or not given value is a valid ethereum address.
    
        Full validation is implemented for ERC20 addresses.
    
        Examples:
            >>> eth_address('0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598')
            True
            >>> eth_address('0x8Ba1f109551bD432803012645Ac136ddd64DBa72')
            ValidationError(func=eth_address, args={'value': '0x8Ba1f109551bD432803012645Ac136ddd64DBa72'})
    
        Args:
            value:
                Ethereum address string to validate.
    
        Returns:
            (Literal[True]): If `value` is a valid ethereum address.
            (ValidationError): If `value` is an invalid ethereum address.
        """  # noqa: E501
        if not _keccak_flag:
>           raise ImportError(
                "Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation."
            )
E           ImportError: Do `pip install validators[crypto-eth-addresses]` to perform `eth_address` validation.

src\validators\crypto_addresses\eth_address.py:54: ImportError
=============================== tests coverage ================================
_______________ coverage: platform win32, python 3.13.9-final-0 _______________

Name                                             Stmts   Miss  Cover   Missing
------------------------------------------------------------------------------
src\validators\__init__.py                          22      0   100%
src\validators\_extremes.py                         10      0   100%
src\validators\between.py                           19      0   100%
src\validators\card.py                              45      1    98%   33
src\validators\country.py                           42      3    93%   231, 261, 347
src\validators\cron.py                              44      4    91%   20, 38, 60, 74
src\validators\crypto_addresses\__init__.py          5      0   100%
src\validators\crypto_addresses\bsc_address.py       9      1    89%   31
src\validators\crypto_addresses\btc_address.py      17      1    94%   49
src\validators\crypto_addresses\eth_address.py      23     11    52%   19-30, 58-61
src\validators\crypto_addresses\trx_address.py      25      5    80%   23, 27-28, 31, 58
src\validators\domain.py                            36      3    92%   34, 37, 77
src\validators\email.py                             15      3    80%   68-72
src\validators\encoding.py                          14      0   100%
src\validators\finance.py                           60      5    92%   18, 20, 22, 44, 136
src\validators\hashes.py                            20      0   100%
src\validators\hostname.py                          29      0   100%
src\validators\i18n\__init__.py                      6      0   100%
src\validators\i18n\es.py                           39      0   100%
src\validators\i18n\fi.py                           30      0   100%
src\validators\i18n\fr.py                           39      1    97%   112
src\validators\i18n\ind.py                           8      0   100%
src\validators\i18n\ru.py                           20      4    80%   34, 61-63
src\validators\iban.py                              10      0   100%
src\validators\ip_address.py                        34      4    88%   86, 90, 131, 135
src\validators\length.py                            10      0   100%
src\validators\mac_address.py                        7      0   100%
src\validators\slug.py                               5      0   100%
src\validators\uri.py                               34     34     0%   7-101
src\validators\url.py                               54      3    94%   76, 152-153
src\validators\utils.py                             39      7    82%   77-78, 80, 84-87, 96
src\validators\uuid.py                              14      1    93%   35
------------------------------------------------------------------------------
TOTAL                                              784     91    88%
=========================== short test summary info ===========================
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x8ba1f109551bd432803012645ac136ddd64dba72]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x9cc14ba4f9f68ca159ea4ebf2c292a808aaeb598]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x742d35Cc6634C0532925a3b844Bc454e4438f44e]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x1234567890123456789012345678901234567890]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_true_on_valid_eth_address[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x742d35Cc6634C0532925a3b844Bc454e4438f44g]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x742d35Cc6634C0532925a3b844Bc454e4438f44]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0xAbcdefg1234567890Abcdefg1234567890Abcdefg]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c72]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x80fBD7F8B3f81D0e1d6EACAb69AF104A6508AFB1]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c7g]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x7c8EE9977c6f96b6b9774b3e8e4Cc9B93B12b2c]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[0x7Fb21a171205f3B8d8E4d88A2d2f8A56E45DdB5c]
FAILED tests/crypto_addresses/test_eth_address.py::test_returns_failed_validation_on_invalid_eth_address[validators.eth]
======================= 17 failed, 878 passed in 2.36s ========================
